USE Mavenmovies;

/* 
--Q.1 Rank the customers based on the total amount they've spent on rental.
*/

select customer_id, sum(amount) as total_amount,  
 rank() over( order by sum(amount) desc) as customers_rank
from payment
group by customer_id;

/*
--Q2 Calculate the cumulative revenue generated by each film over time.
*/

select f.film_id, f.title, p.payment_date, sum(p.amount) 
over (partition by f.film_id order by p.payment_date) as cumulative_revenue
from payment p join rental r on p.rental_id = r.rental_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
order by f.film_id, p.payment_date;


/*
--Q.3  Determine the average rental duration for each film, considering films with similar lengths.
*/

select film_id, title, rental_duration,
avg(rental_duration) over (partition by  rental_duration) as avg_rental_duration
from film;

/*
-- Q4. Identify the top 3 films in each category based on their rental counts.
*/


with Ranked_films as (
    select fc.category_id, fc.film_id, f.title,
        row_number() over (partition by fc.category_id order by count(r.rental_id) desc) as ranking
    from film_category fc
    join rental r on fc.film_id = r.inventory_id
    join film f on fc.film_id = f.film_id
    group by fc.category_id, fc.film_id, f.title
)
select category_id, film_id, title, ranking
from Ranked_films
where ranking <= 3;

/*
--Q.5 Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers
*/


with Customer_rental_difference as (
    select
        customer_id,
        count(rental_id) as total_rentals,
        avg(count(rental_id)) over () as avg_rentals_across_customers,
        count(rental_id) - avg(count(rental_id)) over () as rental_difference
    from
        rental
    group by
        customer_id
)
select
    customer_id,
    total_rentals,
    avg_rentals_across_customers,
    rental_difference
from
    Customer_rental_difference;
    
    
  /*
  --Find the monthly revenue trend for the entire rental store over time.    
  */
  
  
  with Monthly_revenue as (
    select
        date_format(payment_date, '%Y-%m') as month,
        sum(amount) as total_revenue
    from
        payment
    group by
        date_format(payment_date, '%Y-%m')
)
select
    month,
    total_revenue,
    sum(total_revenue) over (order by month) as cumulative_revenue
from
    Monthly_revenue
order by
    month;
    
    /*
    --Identify the customers whose total spending on rentals falls within the top 20% of all customers.
    */
    
    
    with Customer_spending as (
    select
        customer_id,
        sum(amount) as total_spending,
        rank() over (order by sum(amount) desc) as customer_rank
    from
        payment
    group by
        customer_id
)
select
    customer_id,
    total_spending
from
    Customer_spending
where
    customer_rank <= (select 0.2 * COUNT(distinct customer_id) + 1 from Customer_spending);


/*
--Q8 Calculate the running total of rentals per category, ordered by rental count.
*/

with Category_rental_count as (
    select
        fc.category_id,
        count(r.rental_id) as rental_count,
        rank() over (partition by fc.category_id order by count(r.rental_id) desc) as rental_rank
    from
        film_category fc
    join
        rental r on fc.film_id = r.inventory_id
    group by
        fc.category_id
)
select
    crc.category_id,
    crc.rental_count,
    sum(crc.rental_count) over (order by crc.rental_rank) as running_total
from
    Category_rental_count crc
order by
    crc.rental_rank;
    
/*
--Q.9 Find the films that have been rented less than the average rental count for their respective categories.
*/

with Film_rental_info as (
    select
        fc.film_id,
        fc.category_id,
        count(r.rental_id) as rental_count,
        avg(count(r.rental_id)) over (partition by fc.category_id) as avg_rental_count
    from
        film_category fc
    join
        rental r on fc.film_id = r.inventory_id
    group by
        fc.film_id, fc.category_id
)
select
    fri.film_id,
    fri.category_id,
    fri.rental_count,
    fri.avg_rental_count
from
    Film_rental_info fri
where
    fri.rental_count < fri.avg_rental_count;
    
/*
--Q.10 Identify the top 5 months with the highest revenue and display the revenue generated in each month.
*/

with Monthly_revenue as (
    select
        date_format(payment_date, '%Y-%m') as month,
        sum(amount) as total_revenue
    from
        payment
    group by
        date_format(payment_date, '%Y-%m')
)
select
    month,
    total_revenue
from
    Monthly_revenue
order by
    total_revenue desc
limit 5;


    